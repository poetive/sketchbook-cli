#!/bin/bash

alias sb='sketchbook'

sketchbook() {
    if [[ $1 == "new" ]]
    then
        sketchbook-new
    elif [[ $1 == "clone" ]]
    then
        sketchbook-clone
    elif [[ $1 == "init" ]]
    then
        sketchbook-init
    elif [[ $1 == "connect" ]]
    then
        sketchbook-connect
    elif [[ $1 == "push" ]]
    then
        sketchbook-push
    elif [[ $1 == "pull" ]]
    then
        sketchbook-pull
    elif [[ $1 == "help" || $1 == "--help" ]]
    then
        echo "List of all available sketchbook commands:"
        echo "  new\t Create a new repository"
        echo "  init\t Initialise repository for an existing directory"
        echo "  connect\t Connect local repository with a remote one"
        echo "  clone\t Clone remote repository into a new directory"
        echo "  push\t Push changes to a remote repository"
        echo "  pull\t Pull changes from a remote repository"
    else
        echo $1 "is not a valid command. See 'sketchbook --help'."
    fi
}


sketchbook-build() {
    echo 'Building Sketch file(s)...'
    root="${PWD}"
    # Create an array with sketch directories
    sketchDirectories=()
    while IFS= read -r -d $'\0'; do
        sketchDirectories+=("$REPLY")
    done < <(find . -type d -name "*--sketch" -print0)
    # Create sketch file for each sketch directory in array
    for directory in $sketchDirectories; do
        cd $directory
        sketchFile=$(echo $directory | awk -F/ '{print $NF}' | sed -e 's/--sketch$//').sketch
        zip -q -r -X $sketchFile *
        mv $sketchFile ../
        echo "→" $sketchFile
        cd $root
    done
}


sketchbook-clone() {
    while true; do
        # Specify url to clone from
        echo -n 'Repository to clone from: '
        read url
        if [[ -z "${url// }" ]]
        then
            echo "Repository address can not be empty"
            continue
        else
            # Clone and initialise repository
            git clone $url
            repositoryName=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//')
            cd $repositoryName
            sketchbook-build
            echo 'Repository cloned into:' ${PWD}
        fi
        break
    done
}


sketchbook-connect() {
    while true; do
        # Specify remote url
        echo -n 'Remote to link with: '
        read url
        if [[ -z "${url// }" ]]
        then
            echo "Remote address can not be empty"
            continue
        else
            # Set remote url as origin
            git remote add origin $url
        fi
        break
    done
}


sketchbook-extract() {
    echo 'Extracting Sketch file(s)...'
    root="${PWD}"
    # Create an array with sketch files
    sketchFiles=()
    while IFS= read -r -d $'\0'; do
        sketchFiles+=("$REPLY")
    done < <(find . -type f -name "*.sketch" -print0)
    # Create sketch directory for each sketch file in array
    for file in $sketchFiles; do
        directory=$(dirname "${file}")
        filename=$(echo $file | awk -F/ '{print $NF}' | sed -e 's/.sketch$//')
        cd $directory
        command unzip -q -o $filename'.sketch' -d $filename'--sketch'
        # Prettify json files
        for file in $(find . -name '*.json'); do
            python -m json.tool $file > tmp.$$.json
            mv tmp.$$.json $file
        done
        echo "→" $filename'.sketch'
        cd $root
    done
}


sketchbook-init() {
    # Initialise repository
    git init
    # Ignore specific files and folders
    touch .gitignore
    echo 'previews/' >> .gitignore
    echo '*.sketch' >> .gitignore
    # Initialise large file storage
    touch .gitattributes
    echo '*.png filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    echo '*.jpg filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    echo '*.gif filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    # Stage and commit configuration
    git add .gitignore
    git add .gitattributes
    git commit -m '[Chore] Configure repository'
}


sketchbook-new() {
    while true; do
        # Create new project
        echo -n 'Project name: '
        read project
        if [[ -z "${project// }" ]]
        then
            echo "Project name can not be empty"
            continue
        else
            # Create project directory
            mkdir $project
            cd $project
            # Initialise repository
            sketchbook-init
            # Create readme file
            touch README.MD
            echo '#' $project >> README.MD
            # Stage and commit readme file
            git add README.MD
            git commit -m '[Docs] Add README.MD'
            # Create remote repository
            echo -n 'Create remote repository on GitHub? <y/n>: '
            read remote
            if [[ ${remote} == "y" || ${remote} == "Y" || ${remote} == "yes" || ${remote} == "Yes" ]]
            then
                echo -n 'GitHub username: '
                read username
                curl -u "$username" https://api.github.com/user/repos -d '{"name":"'$project'"}'
                git remote add origin git@github.com:$username/$project.git
                git push -u origin master
                echo '→ Local repository location:' ${PWD}
                echo '→ Remote repository address: https://github.com/'$username'/'$project
            fi
        fi
        break
    done
}


sketchbook-pull() {
    git pull
    sketchbook-build
}


sketchbook-push() {
    # Stage files to commit
    sketchbook-extract
    if [[ -z "$sketchFiles" ]]
    then
        echo 'There are no Sketch files to commit'
    else
        find . -name "*--sketch" -type d | xargs git add
        # Commit staged files
        while true; do
            echo -n 'Commit message: '
            read message
            if [[ -z "${message// }" ]]
            then
                echo "Commit message can not be empty"
                continue
            else
                git commit -m $message
            fi
            break
        done
        # Stage deleted files
        git status -s | grep -E '^ D' | cut -d ' ' -f3 | xargs git add --all
        # Push changes to remote
        git push
    fi
}
