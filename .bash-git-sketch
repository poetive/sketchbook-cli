#!/bin/bash

# Info
# 1. Close Sketch files before pushing or pulling changes
# 2. Following scripts are useful for an individual, not a team workflow

# Scenarios
# 1. Create git repository online and clone
# 2. Create git repository locally and add remote origin
# 3. Create git repository locally and create remote repository

# To do
# 1. Test adding sketch file from subfolder
# 2. Fix extractSketchFiles script to iterate over directories
# 3. Test gitlfs on git-sketch-init
# does cloned repository have origin enabled? is local connected with remote?


extractSketchFiles() {
    echo 'Extracting Sketch file(s)...'
    root="${PWD}"
    sketchFiles=()
    while IFS= read -r -d $'\0'; do
        sketchFiles+=("$REPLY")
    done < <(find . -type f -name "*.sketch" -print0)
    for file in $sketchFiles; do
        directory=$(dirname "${file}")
        filename=$(echo $file | awk -F/ '{print $NF}' | sed -e 's/.sketch$//')
        cd $directory
        command unzip -q -o $filename'.sketch' -d $filename'--sketch'
        for file in $(find . -name '*.json'); do
            python -m json.tool $file > tmp.$$.json
            mv tmp.$$.json $file
        done
        echo "→" $filename'.sketch'
        cd $root
    done
}

buildSketchFiles() {
    echo 'Building Sketch file(s)...'
    root="${PWD}"
    sketchDirectories=()
    while IFS= read -r -d $'\0'; do
        sketchDirectories+=("$REPLY")
    done < <(find . -type d -name "*--sketch" -print0)
    for directory in $sketchDirectories; do
        cd $directory
        sketchFile=$(echo $directory | awk -F/ '{print $NF}' | sed -e 's/--sketch$//').sketch
        zip -q -r -X $sketchFile *
        mv $sketchFile ../
        echo "→" $sketchFile
        cd $root
    done
}



# git-sketch-new() {
    # combine git sketch init with adding/creating remote repo and initial push
    # https://stackoverflow.com/questions/2423777/is-it-possible-to-create-a-remote-repo-on-github-from-the-cli-without-opening-br
# }

sketchbook-init() {
    git init
    touch .gitignore
    echo 'previews/' >> .gitignore
    echo '*.sketch' >> .gitignore
    touch .gitattributes
    echo '*.png filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    echo '*.jpg filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    echo '*.gif filter=lfs diff=lfs merge=lfs -text' >> .gitattributes
    git add .gitignore
    git add .gitattributes
}

sketchbook-connect() {
    while true; do
        echo -n 'Remote to link with: '
        read url
        if [[ -z "${url// }" ]]
        then
            echo "Remote address can not be empty"
            continue
        else
            git remote add origin $url
        fi
        break
    done
}

sketchbook-clone() {
    while true; do
        echo -n 'Repository to clone from: '
        read url
        if [[ -z "${url// }" ]]
        then
            echo "Repository address can not be empty"
            continue
        else
            git clone $url
            repositoryName=$(echo $url | awk -F/ '{print $NF}' | sed -e 's/.git$//')
            cd $repositoryName
            sketchbook-init
            buildSketchFiles
        fi
        break
    done
}

sketchbook-pull() {
    git pull
    buildSketchFiles
}

sketchbook-add() {
    extractSketchFiles
    find . -name "*--sketch" -type d | xargs git add
}

sketchbook-commit() {
    while true; do
        echo -n 'Commit message: '
        read message
        if [[ -z "${message// }" ]]
        then
            echo "Commit message can not be empty"
            continue
        else
            git commit -m $message
        fi
        break
    done
}

sketchbook-push() {
    git push
}





sketchbook() {
    if [[ $1 == "new" ]]
    then
        echo 'New repository created in:' ${PWD}
        # echo 'Remote location:'
        # To do

    elif [[ $1 == "init" ]]
    then
        sketchbook-init
        echo 'New repository initialised in:' ${PWD}
        # Test needed

    elif [[ $1 == "connect" ]]
    then
        sketchbook-connect
        # Test needed

    elif [[ $1 == "clone" ]]
    then
        sketchbook-clone
        echo 'Repository cloned into:' ${PWD}
        # Test needed

    elif [[ $1 == "push" ]]
    then
        sketchbook-add
        sketchbook-commit
        sketchbook-push
        # Test needed

    elif [[ $1 == "pull" ]]
    then
        sketchbook-pull
        # Test needed

    elif [[ $1 == "help" || $1 == "--help" ]]
    then
        echo "List of all available sketchbook commands:"
        echo "  new\t Create a new repository"
        echo "  init\t Initialise repository for an existing directory"
        echo "  connect\t Connect local repository with a remote one"
        echo "  clone\t Clone remote repository into a new directory"
        echo "  push\t Push changes to a remote repository"
        echo "  pull\t Pull changes from a remote repository"

    else
        echo $1 "is not a valid command. See 'sketchbook --help'."

    fi
}